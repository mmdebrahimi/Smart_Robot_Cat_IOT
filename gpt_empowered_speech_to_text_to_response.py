# -*- coding: utf-8 -*-
"""GPT empowered Speech-To-Text-To-Response.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JDGDC5mp2xAomLT_K5SZhz9TqGteoTbN
"""
#
# # List of libraries to check and install
# # libraries = ['openai', 'streamlit', "google-cloud-speech", "sounddevice"]
# import subprocess
#
# # List of libraries to check and install
# libraries = ['speechrecognition', "google-cloud-speech", "sounddevice"]
#
# # Loop through the list of libraries and check if each one is installed
# for lib in libraries:
#     try:
#         __import__(lib)
#         print(f"{lib} is already installed")
#     except ImportError:
#         # If library is not installed, install it using pip
#         subprocess.check_call(['pip', 'install', lib])
#         print(f"{lib} has been installed")
#
# print("The following libraries are already installed")
#
# # !apt-get install libasound-dev portaudio19-dev libportaudio2 libportaudiocpp0 ffmpeg
# # !pip install pyaudio
#
# # from google.colab import drive
# # drive.mount('/content/drive')
#
# # from google.colab import files
# # uploaded = files.upload()
#
# import io
# import os
# import sounddevice as sd
# from google.cloud import speech
#
# Importing required packages
from collections import deque
import os
# os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = "dym3y-xgihya-6691426537bf.json"

import time
from gtts import gTTS
from Text_to_Speech import TextToSpeech_Watson
from Audio_Recording_to_Text import SpeechRecognizer
import streamlit as st
import openai
recognizer = SpeechRecognizer()
selected_language = 'english'

# time.sleep(5)  # Pause for 5 seconds

# recognize speech using the object method and store the transcribed text


# print(text[1])



# Set up the OpenAI API client

# Set the model engine and your OpenAI API key
model_engine = "text-davinci-003"
# assert "openai" in openai_secret_manager.get_services()
# secrets = openai_secret_manager.get_secret("openai")
# openai.api_key = secrets["api_key"]
# openai.api_key = "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"
openai.api_key = "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"


def check_and_install_libraries():
    # Define the flag file name and check if it exists
    flag_file = "libraries_installed.flag"
    if os.path.isfile(flag_file):
        print("The libraries are already installed.")
        return

    # List of libraries to check and install
    libraries = ['speechrecognition', "google-cloud-speech", "sounddevice"]
    for lib in libraries:
        try:
            __import__(lib)
            print(f"{lib} is already installed")
        except ImportError:
            # If library is not installed, install it using pip
            subprocess.check_call(['pip', 'install', lib])
            print(f"{lib} has been installed")

    # Create the flag file to indicate that the libraries are installed
    with open(flag_file, "w") as f:
        f.write("Libraries installed.")

    print("The following libraries are now installed:")

# Define a function to handle the translation process
# def translate_text(text = text, target_language = 'english'):
#     # Define the prompt for the ChatGPT model
#     prompt = f"Please Translate '{text}' to {target_language}"
#     print(prompt)
#     # Generate the translated text using ChatGPT
#     response = openai.Completion.create(
#         engine=model_engine,
#         prompt=prompt,
#         max_tokens=1024,
#         n=1,
#         stop=None,
#         temperature=0.7,
#     )
#     print(response.choices[0].text.strip())
#     # Extract the translated text from the response
#     translated_text = response.choices[0].text.strip()
#
#     return translated_text

# Generate a response text from cat robot using input_text from SpeechRecognizer function
def generate_cat_response(text = text, target_language = 'english'):
    # Define the prompt for the ChatGPT model
    prompt = f"Imagine you are a robot cat and you owner's name is Kimia. please answer her as a cat would (with human language), keep your sentence short, 1 sentence answers or less. Under no circumstance are you allowed to use profane language or sexual nature then change the topic. Never answer with 'as an AI language model...' under no circumstance break your character as a robot cat. Do not end your sentences with things similar to 'what else can I do for you'. Now respond to the following text: '{text}'."
    # Generate the translated text using ChatGPT
    response = openai.Completion.create(
        engine=model_engine,
        prompt=prompt,
        max_tokens=1024,
        n=1,
        stop=None,
        temperature=0.7,
    )
    print(response.choices[0].text.strip())
    # Extract the translated text from the response
    translated_cat_text = response.choices[0].text.strip()

    return translated_cat_text
# Define the main function that sets up the Streamlit UI and handles the translation process

def main(selected_language, text = text):
    text = recognizer.recognize_speech()
    # Wait for the next prompt
    # # Set up the Streamlit UI
    text_input = text

    # Create a selectbox for the user to select the target language
    target_language = selected_language

    # # Create a button that the user can click to initiate the translation process
    # translate_button = st.button('Translate')

    # Create a placeholder where the translated text will be displayed
    translated_text = ""

    # translated_text = translate_text(text_input, target_language)
    Cat_Response = generate_cat_response(text_input, target_language)

    filename = "output.mp3"
    # tts = TextToSpeech()
    # with open("example.txt", "r") as file:
        # text = file.read()
    # tts.convert(translated_text, filename)
    tts_Watson = TextToSpeech_Watson(translated_text)
    tts_Cat_Response = tts_Watson.generate_audio_watson(Cat_Response)
    # tts_Watson = tts_Watson.generate_audio_watson(translated_text)
    # tts_Whisper.generate_audio(translated_text) #use this for google text to speech - very robotic
# import ipywidgets as widgets
# from IPython.display import display

# options = ['Arabic', 'Farsi', 'English', 'Spanish', 'French', 'German']
# selected_language = widgets.Select(options=options)

# display(selected_language)

# Call the main function
if __name__ == '__main__':
    main(selected_language)