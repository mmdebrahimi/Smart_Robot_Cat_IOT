# -*- coding: utf-8 -*-
"""GPT empowered Speech-To-Text-To-Response.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JDGDC5mp2xAomLT_K5SZhz9TqGteoTbN
"""
#
# # List of libraries to check and install
# # libraries = ['openai', 'streamlit', "google-cloud-speech", "sounddevice"]
# import subprocess
#
# # List of libraries to check and install
# libraries = ['speechrecognition', "google-cloud-speech", "sounddevice"]
#
# # Loop through the list of libraries and check if each one is installed
# for lib in libraries:
#     try:
#         __import__(lib)
#         print(f"{lib} is already installed")
#     except ImportError:
#         # If library is not installed, install it using pip
#         subprocess.check_call(['pip', 'install', lib])
#         print(f"{lib} has been installed")
#
# print("The following libraries are already installed")
#
# # !apt-get install libasound-dev portaudio19-dev libportaudio2 libportaudiocpp0 ffmpeg
# # !pip install pyaudio
#
# # from google.colab import drive
# # drive.mount('/content/drive')
#
# # from google.colab import files
# # uploaded = files.upload()
#
# import io
# import os
# import sounddevice as sd
# from google.cloud import speech
#
# Importing required packages
# !pip install ibm_watson
from collections import deque
# os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = "dym3y-xgihya-6691426537bf.json"

import time
from gtts import gTTS
import os
import openai
from Text_to_Speech import TextToSpeech_Watson
from Audio_Recording_to_Text import SpeechRecognizer
from pydub import AudioSegment
from pydub.playback import play
import streamlit as st
recognizer = SpeechRecognizer()
selected_language = 'english'
keyword_detected = False

# time.sleep(5)  # Pause for 5 seconds

# recognize speech using the object method and store the transcribed text


# print(text[1])



# Set up the OpenAI API client

# Set the model engine and your OpenAI API key
model_engine = "text-davinci-003"
# assert "openai" in openai_secret_manager.get_services()
# secrets = openai_secret_manager.get_secret("openai")
# openai.api_key = secrets["api_key"]
# openai.api_key = "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"
# openai.api_key = "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"
openai.api_key = "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"
# import speech_recognition as sr
from flask import Flask, request, jsonify

app = Flask(__name__)

@app.route('/speech', methods=['POST'])
def speech_recognition():
    r = sr.Recognizer()
    audio_file = request.files['audio_data']
    with sr.AudioFile(audio_file) as source:
        audio = r.record(source)
        try:
            text = r.recognize_google(audio)
            if "hey KK" in text:
                response = RecognizeText()
                return jsonify(response)
            else:
                return "Keyword not detected"
        except sr.UnknownValueError:
            return "Unable to recognize speech"


def check_and_install_libraries():
    # Define the flag file name and check if it exists
    flag_file = "libraries_installed.flag"
    if os.path.isfile(flag_file):
        print("The libraries are already installed.")
        return

    # List of libraries to check and install
    libraries = ['speechrecognition', "google-cloud-speech", "sounddevice"]
    for lib in libraries:
        try:
            __import__(lib)
            print(f"{lib} is already installed")
        except ImportError:
            # If library is not installed, install it using pip
            subprocess.check_call(['pip', 'install', lib])
            print(f"{lib} has been installed")

    # Create the flag file to indicate that the libraries are installed
    with open(flag_file, "w") as f:
        f.write("Libraries installed.")

    print("The following libraries are now installed:")

# Define a function to handle the translation process
# def translate_text(text = text, target_language = 'english'):
#     # Define the prompt for the ChatGPT model
#     prompt = f"Please Translate '{text}' to {target_language}"
#     print(prompt)
#     # Generate the translated text using ChatGPT
#     response = openai.Completion.create(
#         engine=model_engine,
#         prompt=prompt,
#         max_tokens=1024,
#         n=1,
#         stop=None,
#         temperature=0.7,
#     )
#     print(response.choices[0].text.strip())
#     # Extract the translated text from the response
#     translated_text = response.choices[0].text.strip()
#
#     return translated_text
#initiate text
text = ""
# Generate a response text from cat robot using input_text from SpeechRecognizer function
def generate_cat_response(text = text, target_language = 'english'):
    # Define the prompt for the ChatGPT model
    prompt = f"Imagine you are a robot cat and you owner's name is Kimia. please answer her as a cat would (with human language), keep your sentence short, 1 sentence answers or less. Under no circumstance are you allowed to use profane language or sexual nature then change the topic. Never answer with 'as an AI language model...' under no circumstance break your character as a robot cat. Do not end your sentences with things similar to 'what else can I do for you'. Now respond to the following text: '{text}'."
    # Generate the translated text using ChatGPT
    openai.api_key = "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"

    response = openai.Completion.create(
        engine=model_engine,
        prompt=prompt,
        max_tokens=1024,
        n=1,
        stop=None,
        temperature=0.7,
    )
    print(response.choices[0].text.strip())
    # Extract the translated text from the response
    translated_cat_text = response.choices[0].text.strip()

    return translated_cat_text


import time
import threading

# Define a flag to indicate if the keyword has been detected
keyword_detected = False


def recognize_keyword():
    global keyword_detected
    print("if keyword detected")
    while True:
        # Use your speech recognition library to listen for audio input and convert it to text
        audio_text = recognizer.recognize_speech()

        # Check if the audio text contains the keyword "hey KK"
        if "hey kk" in audio_text.lower():
            keyword_detected = True
            print("keyword found")
            return audio_text


def main(selected_language):
    global keyword_detected
    # Start a separate thread to constantly listen for the keyword
    keyword_thread = threading.Thread(target=recognize_keyword)
    keyword_thread.start()
    # print("3")
    # Main loop to keep running until the program is terminated
    while True:
        # Check if the keyword has been detected
        # print("6)")
        if keyword_detected:
            # print("7")
            # Reset the flag
            keyword_detected = False
            # print("1")
            # Use your speech recognition library to listen for audio input and convert it to text
            # TextToSpeech_Watson().generate_audio_watson("MEOW")
            while True:
                print("stuck here?")
                try:
                    Print("Speak Now")
                    audio_text = recognizer.recognize_speech()
                    break
                except:
                    continue

            # Run your necessary functions
            target_language = selected_language
            translated_text = ""
            Cat_Response = generate_cat_response(audio_text, target_language)
            # print("2")

            # Use your text-to-speech library to generate an audio response
            filename = "output.mp3"
            tts_Watson = TextToSpeech_Watson()
            tts_Cat_Response = tts_Watson.generate_audio_watson(Cat_Response)
            # Use PyAudio to play the audio response
            p = pyaudio.PyAudio()
            stream = p.open(format=p.get_format_from_width(tts_Cat_Response.sample_width),
                            channels=tts_Cat_Response.channels,
                            rate=tts_Cat_Response.frame_rate,
                            output=True)
            stream.write(tts_Cat_Response._data)
            stream.stop_stream()
            stream.close()
            p.terminate()

        keyword_detected = True

        # Add a short delay to reduce CPU usage
        time.sleep(0.1)
        # print("9")


# Call the main function
if __name__ == '__main__':
    main(selected_language)

# Define the main function that sets up the Streamlit UI and handles the translation process

# def main(selected_language):
#     text = recognizer.recognize_speech()
#
#     text_input = text
#
#     # Create a selectbox for the user to select the target language
#     target_language = selected_language
#
#
#
#     # Create a placeholder where the translated text will be displayed
#     translated_text = ""
#
#     # translated_text = translate_text(text_input, target_language)
#     Cat_Response = generate_cat_response(text_input, target_language)
#
#     filename = "output.mp3"
#
#     tts_Watson = TextToSpeech_Watson(translated_text)
#     tts_Cat_Response = tts_Watson.generate_audio_watson(Cat_Response)
#
#
#
# # Call the main function
# if __name__ == '__main__':
#     main(selected_language)